◎ JSX(JavaScript XML) 란?
▶ React 공식 홈페이지
- React에서는 본질적으로 렌더링 로직이 UI 로직 (이벤트가 처리되는 방식, 시간에 따라 state가 변하는 방식, 화면에 표시하기 위해 데이터가 준비되는 방식 등)과 연결된다는 사실을 받아들입니다.
- React는 별도의 파일에 마크업과 로직을 넣어 기술을 인위적으로 분리하는 대신, 둘 다 포함하는 "컴포넌트"라고 부르는 느슨하게 연결된 유닛으로 관심사를 분리합니다. 
- React는 JSX 사용이 필수가 아니지만, 대부분의 사람은 JS 코드 안에서 UI 관련 작업을 할 때 시각적으로 더 도움이 된다고 생각합니다. 또한 React가 더욱 도움이 되는 에러 및 경고 메시지를 표시할 수 있게 해줍니다. 

▶ 여러가지 블로그
- JSX는 자바스크립트의 확장 문법이다. XML과 매우 비슷하게 생겼으며, 이런 형식으로 작성한 코드는 브라우저에서 실행되기 전에 코드가 번들링되는 과정에서 바벨을 사용하여 일반 자바스크립트 형태의 코드로 변환된다. 
- JSX는 리액트로 개발할 때 사용되므로 공식적인 자바스크립트 문법은 아니다. 바벨에서는 여러 문법을 지원할 수 있도록 preset 및 plugin을 설정한다. 바벨을 통ㄹ해 개발자들이 임의로 만든 문법, 혹은 차기 자바스크립트의 문법들을 사용할 수 있다. 
- JSX는 React "element"를 생성한다. React 엘리먼트는 브라우저 DOM 엘리먼트와 달리 일반 객체이다.
- React는 JSX 사용이 필수가 아니지만, JS 코드 안에서 UI관련 작업을 할 수 있기 때문에 시각적으로 더 도움이 된다. 또한 JSX를 사용하면 React가 더욱 도움이 되는 에러 및 경고 메시지를 표시할 수 있게 해준다. 
- JSX는 공식적인 JS 문법이 아니기 때문에 브라우저는 JSX를 이해하지 못한다. 그렇기에 리액트로 개발을 할 때에는 JSX를 브라우저가 이해할 수 있는 평범한 JS로 변환시킬 방법이 필요하다.
- JSX를 사용하지 않고 React.createElement() 함수를 사용하면 컴포넌트를 렌더링 할 수 있다.  
   하지만, 이 방식은 JSX를 사용하는 방식보다 불편하다. JSX를 사용하면 쉽고 편하게 UI를 렌더링 가능하다.

▶ ReactDOM.render(element, container[, callback])
- 개발자가 작성한 JSX를 화면에 렌더링하기 위해서는 ReactDOM.render() 함수를 사용해야 한다. 이 함수는 컴포넌트를 페이지에 렌더링하는 역할을 하며, react-dom 모듈을 불러와 사용할 수 있다. 
☞ element - JSX로 작성한 화면에 출력할 내용
☞ container - 첫 번째 인자인 JSX를 렌더링 해서 보여줄 DOM 안의 위치

▶ JSX 장점
1. 보기 쉽고 익숙하다.
- JSX는 HTML 코드와 비슷하기 때문에 일반 자바스크립트만 사용한 코드보다 더 익숙하며 가독성이 좋다.
2. 높은 활용도
- JSX에는 div, span 같은 HTML 태그를 사용할 수 있으며, 개발자가 만든 컴포넌트도 JSX 안에서 작성할 수 있다. 

▶ JSX 특징
1. 대소문자를 구별한다
- JSX에서 HTML엘리먼트를 작성할 때는 반드시 소문자를 사용해야 하지만, 컴포넌트를 작성할 때는 컴포넌트 클래스 이름과 동일하게 PascalCase로 작성되어야 한다.
2. 주입공격을 방지한다.
- 기본적으로 React DOM은 JSX에 삽입된 모든 값을 렌더링하기 전에 이스케이프 처리하므로, 애플리케이션에서 명시적으로 작성되지 않은 내용은 주입되지 않는다. 모든 항목은 렌더링 되기 전에 문자열로 변환된다. 이런 특성으로 인해 XSS(cross-site-scripting) 공격을 방지할 수 있다.

======================================================================================

◎ 컴포넌트 생성
React를 사용할 때는 컴포넌트를 class 또는 함수로 정의할 수 있다. class로 정의된 컴포넌트는 보다 많은 기능을 제공한다. React 컴포넌트 class를 정의하려면 React.Component를 상속받아야 한다.
▶render()
- render()는 React.Component의 하위 class에서 반드시 정의해야 하는 메서드다. 
- render()가 호출되면 this.props와 this.state의 값을 활용해야 한다. 
- render()는 순수해야 한다. 즉, 컴포넌트의 state를 변경하지 않고, 호출될 때마다 동일한 결과를 반환해야 하며, 브라우저와 직접적으로 상호작용을 하지 않는다.
▶constructor()
- 메서드를 바인딩하거나 state를 초기화하는 작업이 없다면, 해당 React 컴포넌트에는 생성자를 구현하지 안하도 된다.
-this.state에 객체를 할당하여 지역 state를 초기화할 때 사용
-인스턴스에 이벤트 처리 메서드를 바인딩 시 사용
-constructor() 내부에서 setState()를 호출하면 안된다. 컴포넌트에 지역 state가 필요하다면 생성자 내에서 this.state에 초기 state 값을 할당하면 된다. 
-생성자는 this.state를 직접 할당할 수 있는 유일한 곳이다. 그 외의 메서드에서는 this.setState()를 사용.

① MyComponent.js 파일 생성
먼저 컴포넌트를 만들기 위해서는 컴포넌트 코드를 정의해야 한다. 컴포넌트 코드를 정의할 파일을 생성해 준다.
② MyComponent.js 소스 작성
이제 우리가 만든 파일에 해당 Component가 View(뷰)에 어떤 모습으로 보일지 어떤 동작을 할 지에 대한 부분을 코드로 정의해야 한다.
( import React, { Component } from 'react'; )
③ app.js 코드 작성
이제 해당 앱의 최상위 Component에 해당하는 app.js 코드를 작성한다. App Component는 앞에서 정의한 MyComponent를 포함한 형태로 코드를 작성할 것이다. 
( import MyComponent from "./MyComponent"; )

======================================================================================

◎ props란?
▶ 프로퍼티(props)란?
- 프로퍼티, props(properties의 줄임말) 라고 한다.
- 컴포넌트끼리의 값을 전달하는 수단이다.
- 상위 컴포넌트가 하위 컴포넌트에 값을 전달할 때 사용한다. (단방향 데이터 흐름을 갖는다.)
- 프로퍼티는 수정할 수 없다는 특징이 있다. (자식입장에선 읽기 전용인 데이터이다. => 항상 동일한 입력값에 대해 동일한 결과를 반환해야 한다.)
	
▶ 사용방법?
- 프로퍼티에 문자열을 전달할 때는 큰따옴표(" ")를, 문자열 외의 값을 전달할 때는 중괄호({})를 사용한다.

defaultProps 로 기본값 설정하기 
~.defaultProps = {} 


















