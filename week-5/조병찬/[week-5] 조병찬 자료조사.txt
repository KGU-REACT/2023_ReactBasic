● CSS Module 이란?
- 리액트 프로젝트에서 컴포넌트를 스타일링할 때 CSS Module이라는 기술을 사용하면, CSS 클래스가 중첩되는 것을 완벽히 방지할 수 있다.
- 클래스 이름에 대하여 고유한 이름들이 만들어지기 때문에, 실수로 CSS 클래스 이름이 다른 관계 없는 곳에서 사용한 CSS 클래스 이름과 중복되는 일은 걱정 할 필요가 없다.

※ 리액트 컴포넌트를 위한 클래스를 작성 할 때 css 클래스 네이밍 규칙
ⓐ 컴포넌트의 이름은 다른 컴포넌트와 중복되지 않게 한다.
ⓑ 컴포넌트의 최상단 css 클래스는 컴포넌트의 이름과 일치시킨다.
ⓒ 컴포넌트 내부에서 보여지는 css 클래스는 css Selector 를 활용한다.
이러한 css 클래스 네이밍 규칙을 만들고 따르기 싫다면, css Module을 사용하면 된다.

- css-module을 이용하면 클래스명이 충돌하는 단점을 극복할 수 있다.
- css-module은 간결한 클래스명을 이용해서 컴포넌트 단위로 스타일을 적용할 때 좋다.
- 클래스 이름에 hash값이 붙어 고유한 값으로 인식되기 때문에 클래스명이 같더라도 덮어 씌워지지 않는다.

◎ 사용법
# 파일명 지정 - 파일명은 보통 클래스명.module.css 로 사용한다.
# 적용법
- import 할 때 앞에 이름을 지정하고, 클래스에 적용시킬 때는 메서드를 호출하는 것처럼 CSS module 클래스명을 호출하면 된다.

● Styled Components 란?
- CSS in JS 기술로, JS 내에 CSS를 작성하는 라이브러리
- 스타일 정의를 CSS파일이 아닌 JS로 작성된 컴포넌트에 바로 삽입하는 스타일 기법
- 클래스명을 해시값으로 자동 생성하고, 클래스명 오염을 방지할 수 있음
- 자바스크립트의 동적인 값들을 온전하게 사용이 가능

▷ CSS in JS?
CSS in JS는 스타일 정의를 CSS 파일이 아닌 js로 작성된 컴포넌트에 바로 삽입하는 스타일 기법이다.
기존에 웹사이트를 개발할 때는 HTML, CSS, JS는 각자 별도의 파일에 두는 것이 최선의 방법이라고 여겨졌다. 하지만, React나 Vue, Angular와 같은 모던 js lib가 인기를 끌며 웹 개발의 패러다임이 바뀌고 있다. 최근에는 웹 애플리케이션을 여러 개의 재활용이 가능한 빌딩 블록으로 분리하여 개발하는 컴포넌트 기반 개발 방법이 주류가 되고 있다. 
따라서, 웹페이지를 HTML, CSS, JS 3개로 분리하는 것이 아니라, 여러 개의 컴포넌트로 분리하고, 각 컴포넌트에 HTML, CSS, JS를 박는 패턴이 많이 사용되고 있다. React는 JSX를 이용해서 이미 JS가 HTML을 포함하고 있는 형태를 취하고 있는데, 여기에 CSS-in-JS 라이브러리만 사용하면 CSS도 손쉽게 JS에 삽입할 수 있다.

# 패키지 설치
Styled Component는 styled-components라는 NPM 패키지명을 가지고 있다. 따라서 React 프로젝트에 npm 커맨드로 간단하게 설치 가능하다.
// npm i styled-components
설치 후 package.json에 styled-componets가 추가된 것을 확인할 수 있다.

# 기본 문법
위에서 설치한 styled-components 패키지에서 styled 함수를 import한다. styled는 Styled Components의 근간이 되는 가장 중요한 것이다. HTML 엘리먼트나 React 컴포넌트에 원하는 스타일을 적용하기 위해 사용된다.
// import styled from "styled-components";
// import Button from "./Button";
// styled(Button)`
//      <Button> React 컴포넌트에 스타일 정의
// `;
위 문법은 ES6의 Tagged Template Literals를 사용해서 스타일을 정의한다. 그리고 styled 함수는 결국 해당 스타일이 적용된 React 컴포넌트를 리턴한다.
외부 라이브러리 없이도 각 CSS 파일에 고유의 네임 스페이스를 부여해주는 CSS 모듈이라는 기술을 통해서 위 동작을 흉내낼 수 있다. 

# 고정 스타일링
우선 <button> HTML 엘리먼트에 원하는 스타일을 적용한 후 StyledButton 변수에 저장한다.
styled 함수가 리턴하는 것은 JSX를 통해 자유롭게 사용할 수 있다.

# 가변 스타일링
Styled Components는 React 컴포넌트에 넘어온 props에 따라 다른 스타일을 적용하는 기능을 제공한다. Tagged Template Literals을 사용하기 때문에 함수도 문자열 안에 포함시킬 수 있다는 점을 이용한다.
/*
import React from "react";
import styled from "styled-components";

const StyledButton = styled.button`
  padding: 6px 12px;
  border-radius: 8px;
  font-size: 1rem;
  line-height: 1.5;
  border: 1px solid lightgray;

  color: ${(props) => props.color || "gray"};
  background: ${(props) => props.background || "white"};
`;

function Button({ children, color, background }) {
  return (
    <StyledButton color={color} background={background} Î>
      {children}
    </StyledButton>
  );
}
*/

프로젝트의 규모가 커질수록 각각의 파일의 관리가 어려워지기 때문에 하나의 파일 안에서 JS와 CSS를 모두 관리한다는 것은 큰 장점이다.
CSS 파일에서 작성한 class와 id를 올바르게 작성했는지 파일을 이동하지 않아도 되고, Styled Components에서는 같은 컴포넌트 이름을 사용하더라도 다른 파일에 위치하고 있다면 랜덤한 className을 지정하여 주기 때문에 네이밍에 대한 스트레스를 받지 않아도 된다.













